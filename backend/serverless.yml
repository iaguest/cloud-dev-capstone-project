service:
  name: cloud-capstone-proj

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}

  # tracing:
  #   lambda: true
  #   apiGateway: true

  environment:
    ATTACHMENTS_S3_BUCKET: user-info-attachments-677795121369-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    WATCH_TABLE: Watch-${self:provider.stage}
    USER_INFO_TABLE: User-Info-${self:provider.stage}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetUserInfo:
    handler: src/lambda/http/getUserInfo.handler
    events:
      - http:
          method: get
          path: userinfo
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_INFO_TABLE}

  UpdateUserInfo:
    handler: src/lambda/http/updateUserInfo.handler
    events:
      - http:
          method: post
          path: userinfo
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/updateuserinfo-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_INFO_TABLE}

  GetWatchItems:
    handler: src/lambda/http/getWatchItems.handler
    events:
      - http:
          method: get
          path: watchlist
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCH_TABLE}

  CreateWatchItem:
    handler: src/lambda/http/createWatchItem.handler
    events:
      - http:
          method: post
          path: watchlist
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/createwatchitem-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCH_TABLE}

  UpdateWatchItem:
    handler: src/lambda/http/updateWatchItem.handler
    events:
      - http:
          method: patch
          path: watchlist/{watchId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/updatewatchitem-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCH_TABLE}

  RefreshWatchItem:
    handler: src/lambda/http/refreshWatchItem.handler
    events:
      - http:
          method: post
          path: watchlist/{watchId}/refresh
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCH_TABLE}

  DeleteWatchItem:
    handler: src/lambda/http/deleteWatchItem.handler
    events:
      - http:
          method: delete
          path: watchlist/{watchId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCH_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*

  ScheduledRefresh:
    handler: src/lambda/schedule/refreshAllWatchItems.handler
    events:
      #- schedule: rate(5 minutes)
      - schedule: cron(0 8-16 ? * MON-FRI *)
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCH_TABLE}

  CheckAlertStatus:
    handler: src/lambda/dynamoDb/checkAlertStatus.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt WatchItemsDynamoDBTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendEmail
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCH_TABLE}
      - Effect: Allow
        Action:
          - ses:SendEmail
        Resource: arn:aws:ses:${self:provider.region}:*:identity/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: userinfo/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_INFO_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    WatchItemsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: watchId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: watchId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: OLD_IMAGE
        TableName: ${self:provider.environment.WATCH_TABLE}

    UserInfoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_INFO_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
